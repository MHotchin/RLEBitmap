
//
//  This file is AUTOMATICALLY GENERATED, and should not be edited unless you are certain
//  that it will not be re-generated anytime in the future.  As generated code, the
//  copyright owner(s) of the generating program do NOT claim any copyright on the code
//  generated.
//
//  Run Length Encoded (RLE) bitmaps.  Each run is encoded as either one or two bytes,
//  with NO PADDING.  Thus, the data for each line of the bitmap is VARIABLE LENGTH, and
//  there is no way of determining where any line other than the first starts without
//  walking though the data.  
//
//  Note that one byte encoding ONLY occurs if the total number of colors is 16 or less,
//  and in that case the 'flags' member of the 'RLEBitmapInfo' will have the first bit
//  (0x01) set.
//
//  In that case, if the high 4 bits of the first byte are ZERO, then this is a 2 byte
//  run.  The first byte is the index of the color in the color palette, and the second
//  byte is the length.
//
//  Else, the lower 4 bits are the color index, and the upper 4 bits are the run length.
//
//  If the 'flags' member first bit is zero, then ALL runs are 2 byte runs.  The first
//  byte is the palette index, and the second is the run length.
//
//  In order to save PROGMEM for other uses, the bitmap data is placed in a section that
//  occurs near the END of the used FLASH.  So, this data should only be accessed using
//  the 'far' versions of the progmem functions - the usual versions are limited to the
//  first 64K of FLASH.
//
//  Data is from file 'Processed\02d.bmp'.
//

const byte 02d_RLEBM_data[] PROGMEM_LATE = 
{
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x3c, 0x11, 0x12, 0x13, 0x54, 0x13, 0x12, 0x11, 0x00, 0x1d, 
	0x00, 0x3a, 0x12, 0x13, 0xb5, 0x13, 0x12, 0x00, 0x1b, 
	0x00, 0x38, 0x12, 0x14, 0xf5, 0x14, 0x12, 0x00, 0x19, 
	0x00, 0x37, 0x13, 0x05, 0x13, 0x13, 0x00, 0x18, 
	0x00, 0x36, 0x14, 0x05, 0x15, 0x14, 0x11, 0x00, 0x16, 
	0x00, 0x28, 0x11, 0x16, 0x27, 0x26, 0x70, 0x05, 0x19, 0x11, 0x00, 0x15, 
	0x00, 0x25, 0x11, 0x17, 0x18, 0x79, 0x17, 0x11, 0x30, 0x14, 0x05, 0x19, 0x14, 0x00, 0x15, 
	0x00, 0x24, 0x17, 0xc9, 0x17, 0x10, 0x13, 0x05, 0x1b, 0x14, 0x00, 0x14, 
	0x00, 0x22, 0x11, 0x18, 0xf9, 0x1a, 0x1b, 0x05, 0x1b, 0x12, 0x00, 0x13, 
	0x00, 0x22, 0x1c, 0x09, 0x11, 0x1a, 0x1b, 0x05, 0x1b, 0x00, 0x13, 
	0x00, 0x21, 0x18, 0x09, 0x13, 0x15, 0x1b, 0x05, 0x1a, 0x12, 0x00, 0x12, 
	0x00, 0x20, 0x16, 0x09, 0x14, 0x1c, 0x1b, 0x05, 0x1a, 0x14, 0x00, 0x12, 
	0x00, 0x1f, 0x11, 0x09, 0x16, 0x1d, 0x1b, 0x05, 0x1a, 0x11, 0x00, 0x11, 
	0x00, 0x1f, 0x17, 0x09, 0x16, 0x1e, 0x1b, 0x05, 0x1a, 0x13, 0x00, 0x11, 
	0x00, 0x1f, 0x18, 0x09, 0x17, 0x35, 0x5b, 0x05, 0x13, 0x14, 0x00, 0x11, 
	0x00, 0x1e, 0x11, 0x09, 0x18, 0x1a, 0x1b, 0x15, 0x1a, 0x4d, 0x15, 0x1b, 0x05, 0x11, 0x14, 0x00, 0x11, 
	0x00, 0x1e, 0x11, 0x09, 0x18, 0x1d, 0x15, 0x1c, 0x59, 0x1c, 0x1a, 0x1b, 0x05, 0x10, 0x14, 0x00, 0x11, 
	0x00, 0x1e, 0x16, 0x09, 0x18, 0x1c, 0x99, 0x1e, 0x1b, 0xf5, 0x14, 0x00, 0x11, 
	0x00, 0x1e, 0x16, 0x09, 0x23, 0x1d, 0x1b, 0xe5, 0x14, 0x00, 0x11, 
	0x00, 0x1e, 0x11, 0x09, 0x24, 0x1a, 0x1b, 0xd5, 0x14, 0x00, 0x11, 
	0x00, 0x1a, 0x11, 0x46, 0x09, 0x24, 0x1e, 0x1b, 0xd5, 0x14, 0x00, 0x11, 
	0x00, 0x18, 0x16, 0x18, 0x09, 0x29, 0x1c, 0xe5, 0x13, 0x00, 0x11, 
	0x00, 0x16, 0x11, 0x17, 0x09, 0x2c, 0xe5, 0x12, 0x00, 0x11, 
	0x00, 0x15, 0x11, 0x09, 0x2e, 0xe5, 0x00, 0x12, 
	0x00, 0x14, 0x11, 0x09, 0x2e, 0x1c, 0x4b, 0x95, 0x13, 0x00, 0x12, 
	0x00, 0x14, 0x18, 0x09, 0x2e, 0x1c, 0x1a, 0x2d, 0x1a, 0x15, 0x1b, 0x75, 0x11, 0x00, 0x12, 
	0x00, 0x13, 0x16, 0x09, 0x34, 0x1c, 0x1d, 0x2b, 0x45, 0x13, 0x00, 0x13, 
	0x00, 0x13, 0x1c, 0x09, 0x36, 0x1e, 0x15, 0x1b, 0x35, 0x00, 0x14, 
	0x00, 0x12, 0x16, 0x09, 0x38, 0x1c, 0x1b, 0x25, 0x12, 0x00, 0x14, 
	0x00, 0x12, 0x17, 0x09, 0x39, 0x1e, 0x1b, 0x12, 0x00, 0x15, 
	0x00, 0x12, 0x18, 0x09, 0x3a, 0x13, 0x00, 0x16, 
	0x00, 0x12, 0x1c, 0x09, 0x3a, 0x16, 0x00, 0x16, 
	0x00, 0x12, 0x18, 0x09, 0x3a, 0x18, 0x00, 0x16, 
	0x00, 0x12, 0x18, 0x09, 0x3a, 0x18, 0x00, 0x16, 
	0x00, 0x12, 0x17, 0x09, 0x3a, 0x18, 0x00, 0x16, 
	0x00, 0x12, 0x11, 0x09, 0x3a, 0x18, 0x00, 0x16, 
	0x00, 0x13, 0x1e, 0x09, 0x39, 0x18, 0x00, 0x16, 
	0x00, 0x13, 0x11, 0x09, 0x39, 0x16, 0x00, 0x16, 
	0x00, 0x14, 0x17, 0x09, 0x37, 0x18, 0x00, 0x17, 
	0x00, 0x15, 0x1e, 0x09, 0x36, 0x16, 0x00, 0x17, 
	0x00, 0x16, 0x17, 0x09, 0x34, 0x16, 0x00, 0x18, 
	0x00, 0x17, 0x16, 0x18, 0x09, 0x30, 0x18, 0x16, 0x00, 0x19, 
	0x00, 0x19, 0x16, 0x17, 0x18, 0x1c, 0x09, 0x29, 0x28, 0x16, 0x00, 0x1b, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	0x00, 0x64, 
	
}; // 100x100 Bitmap (10000 pixels) in 572 bytes

const uint16_t 02d_RLEBM_palette[] PROGMEM_LATE = 
{
	// Palette has 15 entries
	0x0000, 0x2924, 0x6163, 0xa266, 0xd308, 0xeb69, 0x630c, 0xa514, 0xd69a, 0xf79e, 0xec6e, 0xe2c6, 0xf6da, 0xed52, 0xe637, 
};



//  Some platforms don't fully implement the pgmspace.h interface.  Assume ordinary
//  addresses will do.
#if not defined pgm_get_far_address
#define pgm_get_far_address(x) ((uint32_t)(&(x)))
#endif

//  Returns the info needed to render the bitmap.
inline void get_02d_RLEBM(
	RLEBitmapInfo &bmInfo)
{
	bmInfo.pRLEBM_data_far = pgm_get_far_address(02d_RLEBM_data);
	bmInfo.pRLEBM_palette_far = pgm_get_far_address(02d_RLEBM_palette);
	bmInfo.width = 100;
	bmInfo.height = 100;
	bmInfo.flags = 0x01;
}
